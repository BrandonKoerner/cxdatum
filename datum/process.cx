//code generated by CXDatum. DO NOT EDIT.

package model

var dbLikes str
var dbRetweets str
var dbNames str
var dbWallets str
var dbReplies str
var dbTweets str
var dbAccounts str
var dbHashtags str
var dbmeta str


func initdb() {
	var ok bool
	dbRetweets = "Retweets"
	ok = cxdatum.bucket(dbRetweets)
	dbNames = "Names"
	ok = cxdatum.bucket(dbNames)
	dbWallets = "Wallets"
	ok = cxdatum.bucket(dbWallets)
	dbReplies = "Replies"
	ok = cxdatum.bucket(dbReplies)
	dbTweets = "Tweets"
	ok = cxdatum.bucket(dbTweets)
	dbAccounts = "Accounts"
	ok = cxdatum.bucket(dbAccounts)
	dbHashtags = "Hashtags"
	ok = cxdatum.bucket(dbHashtags)
	dbLikes = "Likes"
	ok = cxdatum.bucket(dbLikes)
	ok = cxdatum.bucket(dbmeta)
}




func isBase58(code ui8) (out bool) {
    out = false
    var magicstr []ui8
    magicstr = cxtweet.str2bytes("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
    for i := 0; i < len(magicstr); i++ {
        if code == magicstr[i] {
            out = true
            return
        }
    }
}

func isTweetHashtag(code ui8) (out bool) {
    out = false
    var magicstr []ui8
    magicstr = cxtweet.str2bytes("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_")
    for i := 0; i < len(magicstr); i++ {
        if code == magicstr[i] {
            out = true
            return
        }
    }
}

func toHexDigit(code ui8) (out ui8) {
    if code < 64UB {
        out = code - 48UB
    } else {
        out = code - 87UB
    }
}

func shaToHex(sha [32]ui8) (out str) {
    var arr []ui8
    var idx i32
    var intmp ui8
    for i := 0; i < 32; i++ {
        intmp = sha[i]
        intmp = intmp / 16UB
        intmp = intmp + 48UB
        if intmp >= 58UB {
            intmp = intmp + 39UB
        }
        arr = append(arr, intmp)

        intmp = sha[i]
        intmp = intmp % 16UB
        intmp = intmp + 48UB
        if intmp >= 58UB {
            intmp = intmp + 39UB
        }
        arr = append(arr, intmp)
    }

    out = cxtweet.bytes2str(arr)
}


func stringToSha(s str) (out [32]ui8) {
    var tpcode ui8
    var indx i32 
    var tweet []ui8
    tweet = cxdatum.str2bytes(s)
    if len(tweet) != 64 {
        out = cxdatum.sumsha256(tweet)
        return
    }
    for i := 0; i < 32; i++ {
        tpcode = toHexDigit(tweet[indx])
        indx = indx + 1
        tpcode = tpcode * 16UB
        tpcode = tpcode + toHexDigit(tweet[indx])
        indx = indx + 1
        txid[i] = tpcode
    }
}


func ProcessIncoming (owner [25]ui8, txid [32]ui8, tweet [512]ui8) {
	var _cxdatum_tmp_104 []ui8
	for _cxdatum_tmp_105 := 0; _cxdatum_tmp_105 < 27; _cxdatum_tmp_105++ {
		_cxdatum_tmp_104 = append(_cxdatum_tmp_104, tweet[_cxdatum_tmp_105])
	}
	var _cxdatum_tmp_106 [25]ui8
	for _cxdatum_tmp_107 := 0; _cxdatum_tmp_107 < len(_cxdatum_tmp_104); _cxdatum_tmp_107++ {
		_cxdatum_tmp_106[_cxdatum_tmp_107] = _cxdatum_tmp_104[_cxdatum_tmp_107]
	}
	var _cxdatum_tmp_108 str
	_cxdatum_tmp_108 = cxdatum.rdaddress(_cxdatum_tmp_106)
	var _cxdatum_tmp_109 str
	_cxdatum_tmp_109 = "<|::[]CXTWEET_LIKELIK[]::|>"
	var _cxdatum_tmp_110 str
	_cxdatum_tmp_110 = "<|::[]CXTWEET_RETWEET[]::|>"
	if _cxdatum_tmp_108 == _cxdatum_tmp_109 {
		processLike(owner, txid, tweet)
	} else if _cxdatum_tmp_108 == _cxdatum_tmp_110 {
		processRetweet(owner, txid, tweet)
	} 
}

func processLike (owner [25]ui8, txid [32]ui8, tweet [512]ui8) {
	var _cxdatum_tmp_111 []ui8
	for _cxdatum_tmp_112 := 27; _cxdatum_tmp_112 < 91; _cxdatum_tmp_112++ {
		_cxdatum_tmp_111 = append(_cxdatum_tmp_111, tweet[_cxdatum_tmp_112])
	}
	var _cxdatum_tmp_113 str
	_cxdatum_tmp_113 = cxdatum.bytes2str(_cxdatum_tmp_111)
	var _cxdatum_tmp_114 [32]ui8
	_cxdatum_tmp_114 = stringToSha(_cxdatum_tmp_113)
	var ntxid [32]ui8
	ntxid = _cxdatum_tmp_114
	var _cxdatum_tmp_115 []ui8
	_cxdatum_tmp_115 = serializeSha(ntxid)
	var _cxdatum_tmp_116 []ui8
	_cxdatum_tmp_116 = cxdatum.fetch(dbTweets, _cxdatum_tmp_115)
	var _cxdatum_tmp_117 Tweet
	_cxdatum_tmp_117 = deserializeTweet(_cxdatum_tmp_116)
	var _cxdatum_tmp_120 i32
	_cxdatum_tmp_120 = _cxdatum_tmp_117.likes
	_cxdatum_tmp_120++
	_cxdatum_tmp_117.likes = _cxdatum_tmp_120
	var _cxdatum_tmp_118 []ui8
	_cxdatum_tmp_118 = serializeTweet(_cxdatum_tmp_117)
	var _cxdatum_tmp_119 bool
	_cxdatum_tmp_119 = cxdatum.store(dbTweets, _cxdatum_tmp_115, _cxdatum_tmp_118)
}

func processRetweet (owner [25]ui8, txid [32]ui8, tweet [512]ui8) {
}



func getTweet (txid [32]ui8) (out []ui8) {
	var _cxdatum_tmp_121 []ui8
	_cxdatum_tmp_121 = serializeSha(txid)
	var _cxdatum_tmp_122 []ui8
	_cxdatum_tmp_122 = cxdatum.fetch(dbTweets, _cxdatum_tmp_121)
	var _cxdatum_tmp_123 Tweet
	_cxdatum_tmp_123 = deserializeTweet(_cxdatum_tmp_122)
	txt = _cxdatum_tmp_123
	var _cxdatum_tmp_124 getTweet_arg_EgressReturn
	_cxdatum_tmp_124 = getTweet_arg_EgressReturn{}
	_cxdatum_tmp_124.txt = txt
	out = serializegetTweet_arg_EgressReturn(_cxdatum_tmp_124)
}


